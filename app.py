import streamlit as st
from openai import OpenAI
import json
from datetime import datetime
from typing import Dict, List, Optional
import tiktoken
import io
import re
import speech_recognition as sr

# --- USTAWIENIA STRONY ---
st.set_page_config(
    page_title="Language Helper AI",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
header {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

# --- INICJALIZACJA SESJI ---
def init_session_state():
    if 'api_key' not in st.session_state:
        st.session_state.api_key = ""
    if 'total_tokens' not in st.session_state:
        st.session_state.total_tokens = 0
    if 'total_cost' not in st.session_state:
        st.session_state.total_cost = 0.0
    if 'token_history' not in st.session_state:
        st.session_state.token_history = []
    if 'cost_history' not in st.session_state:
        st.session_state.cost_history = []
    if 'setup_done' not in st.session_state:
        st.session_state.setup_done = False
    if 'request_count' not in st.session_state:
        st.session_state.request_count = 0
    if 'flashcards_data' not in st.session_state:
        st.session_state.flashcards_data = None
    if 'flashcards_image' not in st.session_state:
        st.session_state.flashcards_image = None
    if 'recorded_audio_text' not in st.session_state:
        st.session_state.recorded_audio_text = ""
    if 'practice_text' not in st.session_state:
        st.session_state.practice_text = ""
    if 'practice_mic_version' not in st.session_state:
        st.session_state.practice_mic_version = 0
    # TODO: Dodaƒá dodatkowe zmienne session state w przysz≈Ço≈õci
    pass

# --- SIDEBAR & SETUP ---
def render_sidebar_and_setup():
    st.sidebar.title("üåç Language Helper AI")
    st.sidebar.markdown("---")
    
    # Klucz API
    st.sidebar.markdown("### üîë Klucz API OpenAI")
    api_key = st.sidebar.text_input(
        "Wprowad≈∫ sw√≥j klucz API OpenAI:",
        type="password",
        placeholder="sk-...",
        value=st.session_state.api_key,
        help="Tw√≥j klucz API OpenAI (zaczyna siƒô od 'sk-')"
    )
    
    if api_key != st.session_state.api_key:
        st.session_state.api_key = api_key
    
    if not api_key or not api_key.startswith("sk-"):
        st.sidebar.warning("Podaj poprawny klucz API (zaczyna siƒô od 'sk-').")
        st.stop()
    
    # Motyw
    st.sidebar.markdown("### üé® Motyw")
    theme = st.sidebar.radio("Wybierz motyw", ["Jasny", "Ciemny"], index=0)
    if theme == "Ciemny":
        st.markdown("""
        <style>
        body, .stApp {background-color: #0e1117 !important; color: #fafafa !important;}
        </style>
        """, unsafe_allow_html=True)
    
    # Statystyki
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìä Statystyki API")
    st.sidebar.metric("Tokeny", f"{st.session_state.total_tokens:,}")
    st.sidebar.metric("Koszt", f"${st.session_state.total_cost:.4f}")
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Aplikacja:**")
    st.sidebar.markdown("üåç t≈Çumaczenia")
    st.sidebar.markdown("üìñ fiszki")
    st.sidebar.markdown("üìö wyja≈õnienia")
    st.sidebar.markdown("üé§ wymowa")

# --- KOSZTY I TOKENY ---
def calculate_cost(model: str, input_tokens: int, output_tokens: int) -> float:
    pricing = {
        "gpt-4o": {"input": 0.005, "output": 0.015},
        "gpt-4o-mini": {"input": 0.00015, "output": 0.0006},
        "gpt-4": {"input": 0.03, "output": 0.06},
        "gpt-3.5-turbo": {"input": 0.0005, "output": 0.0015},
        "gpt-3.5-turbo-16k": {"input": 0.003, "output": 0.004},
        "tts-1": {"input": 0.015, "output": 0}
    }
    model_key = model if model in pricing else "gpt-4o"
    input_cost = (input_tokens / 1000) * pricing[model_key]["input"]
    output_cost = (output_tokens / 1000) * pricing[model_key]["output"]
    return input_cost + output_cost

def count_tokens(text: str, model: str = "gpt-4o") -> int:
    try:
        encoding = tiktoken.encoding_for_model(model)
        return len(encoding.encode(text))
    except:
        return len(text) // 4

@st.cache_resource
def get_openai_client(api_key: str):
    if not api_key:
        return None
    try:
        return OpenAI(api_key=api_key)
    except Exception as e:
        st.error(f"‚ùå B≈ÇƒÖd inicjalizacji OpenAI: {e}")
        return None

def update_usage_stats(input_tokens: int, output_tokens: int, model: str):
    total_tokens = input_tokens + output_tokens
    cost = calculate_cost(model, input_tokens, output_tokens)
    st.session_state.total_tokens += total_tokens
    st.session_state.total_cost += cost
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    st.session_state.token_history.append({
        "timestamp": timestamp,
        "input_tokens": input_tokens,
        "output_tokens": output_tokens,
        "total_tokens": total_tokens,
        "model": model
    })
    st.session_state.cost_history.append({
        "timestamp": timestamp,
        "cost": cost,
        "model": model
    })

# --- OPENAI HANDLER ---
class OpenAIHandler:
    def __init__(self, client: OpenAI):
        self.client = client
    
    def make_request(self, messages: List[Dict], model: str = "gpt-4o", temperature: float = 0.7, max_tokens: int = 1200) -> Optional[str]:
        try:
            response = self.client.chat.completions.create(
                model=model,
                messages=messages,
                temperature=temperature,
                max_tokens=max_tokens
            )
            output_text = response.choices[0].message.content
            input_text = " ".join([msg["content"] for msg in messages])
            input_tokens = count_tokens(input_text, model)
            output_tokens = count_tokens(output_text, model)
            update_usage_stats(input_tokens, output_tokens, model)
            return output_text
        except Exception as e:
            st.error(f"B≈ÇƒÖd API OpenAI: {str(e)}")
            return None
    
    def transcribe_audio(self, file_bytes: bytes, filename: str = "audio.wav", language_code: Optional[str] = None) -> Optional[str]:
        """Transkrypcja audio w chmurze (OpenAI)"""
        try:
            # Mapowanie jƒôzyk√≥w na kody ISO
            language_mapping = {
                "Polish": "pl",
                "English": "en", 
                "German": "de",
                "French": "fr",
                "Spanish": "es",
                "Italian": "it",
                "Arabic": "ar",
                "Chinese": "zh",
                "Japanese": "ja"
            }
            
            # Je≈õli podano kod jƒôzyka, u≈ºyj go
            if language_code:
                whisper_language = language_code
            else:
                # Automatyczne wykrywanie jƒôzyka
                whisper_language = None
            
            # Sprawd≈∫ format pliku
            file_extension = filename.lower().split('.')[-1] if '.' in filename else 'wav'
            
            # Obs≈Çugiwane formaty przez OpenAI Whisper
            supported_formats = ['mp3', 'mp4', 'mpeg', 'mpga', 'm4a', 'wav', 'webm']
            
            if file_extension not in supported_formats:
                st.warning(f"‚ö†Ô∏è Format {file_extension} mo≈ºe nie byƒá obs≈Çugiwany przez OpenAI Whisper. Zalecane: MP3, WAV, M4A")
            
            # Transkrypcja audio
            response = self.client.audio.transcriptions.create(
                model="whisper-1",
                file=io.BytesIO(file_bytes),
                language=whisper_language,
                response_format="text"
            )
            
            # Aktualizacja statystyk u≈ºycia (Whisper nie zwraca token√≥w)
            update_usage_stats(0, 0, "whisper-1")
            
            return response
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas transkrypcji audio: {str(e)}")
            return None

# --- SPEECH RECOGNITION MANAGER ---
class SpeechRecognitionManager:
    """ZarzƒÖdzanie rozpoznawaniem mowy"""
    
    def __init__(self):
        self.recognizer = sr.Recognizer()
        
    def get_audio_from_microphone(self) -> Optional[str]:
        """Nagrywanie audio z mikrofonu i konwersja na tekst"""
        try:
            # Sprawd≈∫ dostƒôpno≈õƒá mikrofonu
            try:
                microphone = sr.Microphone()
            except Exception as mic_error:
                raise Exception(f"B≈ÇƒÖd dostƒôpu do mikrofonu: {mic_error}. Sprawd≈∫ czy mikrofon jest pod≈ÇƒÖczony i dzia≈Ça.")
            
            # U≈ºyj mikrofonu
            with microphone as source:
                # Dostosuj do ha≈Çasu otoczenia
                self.recognizer.adjust_for_ambient_noise(source, duration=1.0)
                
                # Ustaw parametry dla szybszego nagrywania
                self.recognizer.energy_threshold = 200  # Ni≈ºszy pr√≥g energii = szybsze wykrycie
                self.recognizer.dynamic_energy_threshold = False  # Wy≈ÇƒÖcz dynamiczny pr√≥g
                self.recognizer.pause_threshold = 0.8  # Kr√≥tszy pr√≥g pauzy = szybsze zatrzymanie
                self.recognizer.non_speaking_duration = 0.8
                
                # Nagrywaj audio z szybszymi parametrami
                audio = self.recognizer.listen(
                    source, 
                    timeout=5,  # Kr√≥tszy timeout na rozpoczƒôcie m√≥wienia
                    phrase_time_limit=15  # Kr√≥tszy limit na frazƒô
                )
                
            # Konwertuj audio na tekst z lepszym rozpoznawaniem
            try:
                # Pierwsza pr√≥ba - standardowe rozpoznawanie
                text = self.recognizer.recognize_google(audio, language='pl-PL')
                if text:
                    return text
                
                # Druga pr√≥ba - bez okre≈õlania jƒôzyka (automatyczne wykrywanie)
                text = self.recognizer.recognize_google(audio)
                if text:
                    return text
                
                # Trzecia pr√≥ba - z angielskim jako fallback
                text = self.recognizer.recognize_google(audio, language='en-US')
                if text:
                    return text
                
                return None
                
            except sr.UnknownValueError:
                # Je≈õli nie rozpoznano mowy, spr√≥buj ponownie z innymi ustawieniami
                try:
                    # Zmie≈Ñ parametry i spr√≥buj ponownie
                    self.recognizer.energy_threshold = 150
                    self.recognizer.pause_threshold = 1.0
                    
                    # Ponowna pr√≥ba nagrania
                    audio_retry = self.recognizer.listen(source, timeout=3, phrase_time_limit=10)
                    text = self.recognizer.recognize_google(audio, language='pl-PL')
                    
                    if text:
                        return text
                    else:
                        return None
                        
                except Exception:
                    return None
                    
        except sr.WaitTimeoutError:
            raise Exception("Przekroczono limit czasu oczekiwania na mowƒô. Spr√≥buj ponownie.")
        except sr.UnknownValueError:
            raise Exception("Nie uda≈Ço siƒô rozpoznaƒá mowy. M√≥w wyra≈∫niej i w normalnym tempie.")
        except sr.RequestError as e:
            raise Exception(f"B≈ÇƒÖd serwisu rozpoznawania mowy: {e}. Sprawd≈∫ po≈ÇƒÖczenie internetowe.")
        except Exception as e:
            raise Exception(f"B≈ÇƒÖd nagrywania: {e}. Sprawd≈∫ czy mikrofon dzia≈Ça.")
    
    def get_audio_from_file(self, audio_file) -> Optional[str]:
        """Konwersja audio z pliku na tekst"""
        try:
            # Wczytaj plik audio
            audio = sr.AudioFile(audio_file)
            
            with audio as source:
                # Konwertuj audio na tekst
                text = self.recognizer.recognize_google(source, language='pl-PL')
                
            if text:
                return text
            else:
                return None
                    
        except Exception as e:
            return None

# --- TRANSLATION MANAGER ---
class TranslationManager:
    def __init__(self, openai_handler: OpenAIHandler):
        self.openai_handler = openai_handler
    
    def translate_text(self, text: str, target_language: str, correct_errors: bool = False, improve_style: bool = False) -> Optional[Dict]:
        """T≈Çumaczy tekst z opcjonalnƒÖ korektƒÖ b≈Çƒôd√≥w i poprawƒÖ stylistyki."""
        try:
            prompt = (
                f"Przet≈Çumacz poni≈ºszy tekst na jƒôzyk {target_language}."
                + (" Najpierw popraw b≈Çƒôdy gramatyczne i stylistyczne, a potem przet≈Çumacz." if correct_errors else "")
                + (" Najpierw popraw stylistykƒô i p≈Çynno≈õƒá tekstu, a potem przet≈Çumacz." if improve_style else "")
                + "\nOdpowiadaj tylko t≈Çumaczeniem, bez wyja≈õnie≈Ñ."
                + f"\nTekst: {text}"
            )
            
            messages = [
                {"role": "system", "content": "Jeste≈õ profesjonalnym t≈Çumaczem i nauczycielem jƒôzyk√≥w."},
                {"role": "user", "content": prompt}
            ]
            
            result = self.openai_handler.make_request(messages)
            
            if result:
                return {
                    "translation": result,
                    "original_text": text,
                    "target_language": target_language,
                    "corrected_errors": correct_errors,
                    "improved_style": improve_style
                }
            return None
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas t≈Çumaczenia: {str(e)}")
            return None
    
    def generate_audio(self, text: str, language: str = "en", voice: str = "alloy") -> Optional[bytes]:
        """Generuje audio z tekstu u≈ºywajƒÖc OpenAI TTS."""
        try:
            # Mapowanie jƒôzyk√≥w na kody TTS
            language_mapping = {
                "Polish": "pl",
                "English": "en", 
                "German": "de",
                "French": "fr",
                "Spanish": "es",
                "Italian": "it",
                "Arabic": "ar",
                "Chinese": "zh",
                "Japanese": "ja"
            }
            
            tts_language = language_mapping.get(language, "en")
            
            # Generowanie audio przez OpenAI TTS
            response = self.openai_handler.client.audio.speech.create(
                model="tts-1",
                voice=voice,  # Mo≈ºna zmieniƒá na: alloy, echo, fable, onyx, nova, shimmer
                input=text,
                response_format="mp3"
            )
            
            # Pobieranie audio
            audio_content = response.content
            
            # Aktualizacja statystyk u≈ºycia
            input_tokens = count_tokens(text, "tts-1")
            update_usage_stats(input_tokens, 0, "tts-1")
            
            return audio_content
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas generowania audio: {str(e)}")
            return None

# --- FISZKI ---
class FlashcardManager:
    def __init__(self, openai_handler: OpenAIHandler):
        self.openai_handler = openai_handler

    def generate_flashcards(self, text: str, definition_language: str) -> Optional[Dict]:
        prompt = (
            f"WydobƒÖd≈∫ 4-6 najwa≈ºniejszych (kluczowych) s≈Ç√≥w z poni≈ºszego tekstu. Nie wybieraj pojedynczych liter ani s≈Ç√≥w nieistotnych.\n"
            f"Dla ka≈ºdego s≈Çowa wygeneruj fiszkƒô w formacie JSON:\n"
            f"- word: oryginalne s≈Çowo\n"
            f"- definition: kr√≥tka definicja w jƒôzyku {definition_language}\n"
            f"- example: przyk≈Çadowe zdanie z tym s≈Çowem w oryginalnym jƒôzyku\n"
            "Odpowiadaj TYLKO i wy≈ÇƒÖcznie w formacie JSON, bez ≈ºadnych wyja≈õnie≈Ñ, komentarzy, tekstu przed ani po JSON.\n"
            "Przyk≈Çad odpowiedzi:\n"
            '{"flashcards": ['
            '{"word": "kot", "definition": "domowe zwierzƒô, czƒôsto trzymane jako towarzysz", "example": "Mam kota."},'
            '{"word": "pies", "definition": "wierny towarzysz cz≈Çowieka, czƒôsto trzymany jako zwierzƒô domowe", "example": "Pies szczeka w ogrodzie."}'
            ']}\n'
            "Tekst:\n" + text
        )
        
        try:
            messages = [
                {"role": "system", "content": "You are a language teacher. Respond ONLY in JSON format, no extra text."},
                {"role": "user", "content": prompt}
            ]
            result = self.openai_handler.make_request(messages, max_tokens=800)
            
            if not result:
                st.error("‚ùå OpenAI zwr√≥ci≈Ço pustƒÖ odpowied≈∫. Spr√≥buj ponownie lub zmie≈Ñ prompt.")
                return None
                
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas generowania: {str(e)}")
            return None

        try:
            if isinstance(result, dict):
                parsed_result = result
            else:
                cleaned = result.strip()
                # Usu≈Ñ p≈Çotki Markdown i wyciƒÖgnij blok JSON
                if cleaned.startswith("```json"):
                    cleaned = cleaned[len("```json"):].strip()
                if cleaned.startswith("```"):
                    cleaned = cleaned[len("```"):].strip()
                if cleaned.endswith("```"):
                    cleaned = cleaned[:-3].strip()
                
                # Je≈õli nadal nie zaczyna siƒô od '{', wyciƒÖgnij blok JSON regexem
                if not cleaned.startswith("{"):
                    match = re.search(r"\{[\s\S]*\}", cleaned)
                    if match:
                        cleaned = match.group(0)
                
                parsed_result = json.loads(cleaned)
            
            if not isinstance(parsed_result, dict) or "flashcards" not in parsed_result:
                st.error("‚ùå Odpowied≈∫ nie zawiera klucza 'flashcards'. Odpowied≈∫:")
                st.code(result)
                return None
            
            return parsed_result
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd parsowania JSON: {e}")
            st.info(f"Odpowied≈∫ OpenAI (debug, typ: {type(result)}):")
            st.code(result)
            return None

    def generate_images(self, flashcards_data: Dict, size_choice: str = "Du≈ºe (800√ó600)", format_choice: str = "PNG (najlepsza jako≈õƒá)", quality_choice: str = "Wysoka") -> Optional[bytes]:
        try:
            from PIL import Image, ImageDraw, ImageFont
            import io
        except ImportError:
            st.error("‚ùå Brak biblioteki Pillow. Zainstaluj: pip install Pillow")
            return None

        try:
            flashcards = flashcards_data.get("flashcards", [])
            if not flashcards:
                st.error("‚ùå Brak danych fiszek do wygenerowania obraz√≥w")
                return None

            card_width, card_height = 400, 280
            margin = 25
            font_large_size, font_medium_size, font_small_size = 18, 14, 11

            max_cards = 4
            cards_per_row = 2
            cards_per_col = min(2, (len(flashcards) + 1) // 2)
            total_width = cards_per_row * card_width + (cards_per_row + 1) * margin
            total_height = cards_per_col * card_height + (cards_per_col + 1) * margin + 80

            img = Image.new('RGB', (total_width, total_height), color='white')
            draw = ImageDraw.Draw(img)

            def _load_font_with_fallback(size: int):
                try:
                    return ImageFont.truetype("arial.ttf", size)
                except Exception:
                    return ImageFont.load_default()

            font_large = _load_font_with_fallback(font_large_size)
            font_medium = _load_font_with_fallback(font_medium_size)
            font_small = _load_font_with_fallback(font_small_size)

            title = "üìö Fiszki do nauki"
            title_bbox = draw.textbbox((0, 0), title, font=font_large)
            title_width = title_bbox[2] - title_bbox[0]
            title_x = (total_width - title_width) // 2
            draw.text((title_x, 15), title, fill='#1f77b4', font=font_large)

            for i, card in enumerate(flashcards[:max_cards]):
                row = i // cards_per_row
                col = i % cards_per_row
                x = margin + col * (card_width + margin)
                y = 70 + row * (card_height + margin)
                
                # Najpierw rysuj cie≈Ñ (szary)
                shadow_offset = 3
                draw.rectangle([x + shadow_offset, y + shadow_offset, x + card_width + shadow_offset, y + card_height + shadow_offset], 
                             outline='#c0c0c0', width=1, fill='#e0e0e0')
                
                # Potem rysuj bia≈ÇƒÖ fiszkƒô na g√≥rze z czarnym obramowaniem
                draw.rectangle([x, y, x + card_width, y + card_height], outline='black', width=2, fill='white')
                # Dodaj niebieskie obramowanie wewnƒôtrzne
                draw.rectangle([x+2, y+2, x + card_width-2, y + card_height-2], outline='#1f77b4', width=1, fill='white')
                
                left_margin = x + 15
                word = card.get("word", "")[:25]
                
                # S≈Çowo - pogrubione i w kolorze
                draw.text((left_margin, y + 15), "S≈ÅOWO:", fill='#1f77b4', font=font_medium)
                draw.text((left_margin + 80, y + 15), word, fill='#2c3e50', font=font_medium)
                
                # Linia oddzielajƒÖca
                line_y = y + 45
                draw.line([left_margin, line_y, x + card_width - 15, line_y], fill='#1f77b4', width=2)
                
                definition = card.get("definition", "")[:50]
                def_y = y + card_height//2 + 15
                draw.text((left_margin, def_y), "DEFINICJA:", fill='#1f77b4', font=font_small)
                draw.text((left_margin + 100, def_y), definition, fill='#333', font=font_small)
                
                example = card.get("example", "")[:60]
                ex_y = def_y + 40
                draw.text((left_margin, ex_y), "PRZYK≈ÅAD:", fill='#1f77b4', font=font_small)
                draw.text((left_margin + 100, ex_y), example, fill='#666', font=font_small)

            bio = io.BytesIO()
            try:
                if "JPG" in format_choice:
                    img.save(bio, format='JPEG', quality=85, optimize=True)
                else:
                    img.save(bio, format='PNG', optimize=True)
                bio.seek(0)
                return bio.getvalue()
            except Exception as save_error:
                st.error(f"‚ùå B≈ÇƒÖd podczas zapisywania obrazu: {save_error}")
                return None

        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd generowania obraz√≥w: {str(e)}")
            return None

# --- G≈Å√ìWNA APLIKACJA ---
class MultilingualApp:
    def __init__(self):
        self.flashcard_manager = None
        self.client = None
        self.openai_handler = None
        self.translation_manager = None

    def render_translation_section(self):
        st.header("üåç T≈Çumaczenie tekstu")
        
        # ≈Åadna ramka dla t≈Çumaczenia
        with st.container():
            st.markdown("""
            <style>
            .translation-box {
                background-color: #f0f2f6;
                border: 2px solid #1f77b4;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            </style>
            """, unsafe_allow_html=True)
            
            # U g√≥ry - wyb√≥r jƒôzyka
            target_lang = st.selectbox(
                "Jƒôzyk docelowy",
                ["English", "German", "French", "Spanish", "Italian"],
                index=0,
                help="Wybierz jƒôzyk na kt√≥ry chcesz przet≈Çumaczyƒá tekst"
            )
            
            # Pod tym - text area
            text = st.text_area("Wpisz tekst do przet≈Çumaczenia", key="translation_text", height=120, value=st.session_state.get('recorded_audio_text', ''))
            
            # Pod spodem - nagrywanie + opcje poprawy
            col1, col2 = st.columns([1, 1])
            
            with col1:
                # Opcje poprawy
                correct_errors = st.checkbox("Popraw b≈Çƒôdy gramatyczne", value=False, help="Automatycznie popraw b≈Çƒôdy przed t≈Çumaczeniem")
                improve_style = st.checkbox("Popraw stylistykƒô", value=False, help="Popraw stylistykƒô i p≈Çynno≈õƒá tekstu")
            
            with col2:
                # Przycisk nagrywania audio
                st.markdown("### üéôÔ∏è Nagrywanie")
                
                if st.button("üî¥ Rozpocznij nagrywanie", key="translation_start_recording", type="secondary", use_container_width=True):
                    try:
                        # Inicjalizacja SpeechRecognitionManager
                        if not hasattr(self, 'translation_speech_manager'):
                            self.translation_speech_manager = SpeechRecognitionManager()
                        
                        with st.spinner("üéôÔ∏è Nagrywam... M√≥w do mikrofonu!"):
                            recorded_text = self.translation_speech_manager.get_audio_from_microphone()
                            
                            if recorded_text:
                                st.session_state.recorded_audio_text = recorded_text
                                st.success("‚úÖ Nagranie zako≈Ñczone!")
                                st.info(f"üé§ Rozpoznany tekst: **{recorded_text}**")
                                st.rerun()  # Od≈õwie≈º stronƒô, aby text area siƒô zaktualizowa≈Ça
                            else:
                                st.error("‚ùå Nie uda≈Ço siƒô rozpoznaƒá mowy. Spr√≥buj ponownie.")
                                
                    except Exception as e:
                        st.error(f"‚ùå B≈ÇƒÖd podczas nagrywania: {str(e)}")
                

            
            if st.button("Przet≈Çumacz", type="primary", use_container_width=True, key="translate_btn"):
                # U≈ºyj tylko text area jako g≈Ç√≥wnego wej≈õcia
                if not text or not text.strip():
                    st.warning("Wpisz tekst do przet≈Çumaczenia w pole tekstowe.")
                    return
                
                text_to_translate = text
                
                st.session_state.request_count += 1
                
                with st.spinner("T≈Çumaczƒô..."):
                    translation_result = self.translation_manager.translate_text(text_to_translate, target_lang, correct_errors, improve_style)
                
                if translation_result:
                    st.success("‚úÖ T≈Çumaczenie gotowe!")
                    # Wy≈õwietl wynik w ≈Çadnej ramce
                    st.markdown(f"""
                    <div class="translation-box">
                        <h4 style="color: #1f77b4; margin-top: 0;">üåç T≈Çumaczenie ({target_lang}):</h4>
                        {translation_result["translation"]}
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # TODO: Dodaƒá generowanie audio w przysz≈Ço≈õci
                    pass
                    
                else:
                    st.error("‚ùå Nie uda≈Ço siƒô przet≈Çumaczyƒá tekstu.")
                


    def render_explanation_section(self):
        st.header("üìö Wyja≈õnienia s≈Ç√≥w i gramatyki")
        
        # ≈Åadna ramka dla wyja≈õnie≈Ñ
        with st.container():
            st.markdown("""
            <style>
            .explanation-box {
                background-color: #f0f2f6;
                border: 2px solid #1f77b4;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            </style>
            """, unsafe_allow_html=True)
            
            explain_text = st.text_area("Wpisz zdanie lub tekst do wyja≈õnienia:", key="explanation_text", height=100)
            
            if st.button("Wyja≈õnij", key="explain_btn", type="primary"):
                if not explain_text.strip():
                    st.warning("Wpisz tekst do wyja≈õnienia.")
                    return
                
                with st.spinner("Wyja≈õniam..."):
                    prompt = (
                        f"Wyja≈õnij znaczenie i gramatykƒô poni≈ºszego tekstu w prosty spos√≥b, z przyk≈Çadami.\nTekst: {explain_text}"
                    )
                    
                    messages = [
                        {"role": "system", "content": "Jeste≈õ nauczycielem jƒôzyk√≥w. Wyja≈õniaj prosto, z przyk≈Çadami."},
                        {"role": "user", "content": prompt}
                    ]
                    
                    result = self.openai_handler.make_request(messages)
                
                if result:
                    st.success("‚úÖ Wyja≈õnienie gotowe!")
                    # Wy≈õwietl wynik w ≈Çadnej ramce
                    st.markdown(f"""
                    <div class="explanation-box">
                        <h4 style="color: #1f77b4; margin-top: 0;">üìñ Wyja≈õnienie:</h4>
                        {result}
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.error("‚ùå Nie uda≈Ço siƒô wygenerowaƒá wyja≈õnienia.")

    def render_flashcard_section(self):
        st.header("üìñ Fiszki ze s≈Ç√≥wek do nauki")
        
        # ≈Åadna ramka dla fiszek
        with st.container():
            st.markdown("""
            <style>
            .flashcard-box {
                background-color: #f0f2f6;
                border: 2px solid #1f77b4;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            </style>
            """, unsafe_allow_html=True)
            
            st.write("üìù Wpisz tekst, z kt√≥rego chcesz wygenerowaƒá fiszki:")
            
            flashcard_text = st.text_area("Tekst do fiszek", key="flashcard_text_new", height=100)
            st.write("Wybierz jƒôzyk definicji fiszek")
            
            definition_lang = st.selectbox(
                "Jƒôzyk definicji", 
                ["Polish", "English", "German", "French", "Spanish", "Italian", "Arabic", "Chinese", "Japanese"], 
                index=0, 
                key="flashcard_def_lang_new"
            )
        
        if st.button("Wygeneruj fiszki", type="primary", use_container_width=True, key="generate_flashcards_new"):
            if not flashcard_text.strip():
                st.warning("Wpisz tekst do wygenerowania fiszek.")
                return
            
            st.session_state.request_count += 1
            
            with st.spinner("Generujƒô fiszki..."):
                flashcards_data = self.flashcard_manager.generate_flashcards(flashcard_text, definition_lang)
            
            if flashcards_data and "flashcards" in flashcards_data and len(flashcards_data["flashcards"]) > 0:
                st.session_state.flashcards_data = flashcards_data
                st.success("‚úÖ Fiszki zosta≈Çy wygenerowane!")
                
                st.info("üé® Automatycznie generujƒô obraz fiszek...")
                with st.spinner("üé® Generujƒô obraz fiszek..."):
                    image_data = self.flashcard_manager.generate_images(flashcards_data)
                
                if image_data:
                    st.session_state.flashcards_image = image_data
                    st.image(image_data, use_container_width=True)
                    
                    # Dodaj timestamp ≈ºeby obraz by≈Ç zawsze ≈õwie≈ºy
                    import time
                    timestamp = int(time.time())
                    
                    st.download_button(
                        label="üì• Pobierz fiszki jako PNG",
                        data=image_data,
                        file_name=f"flashcards_{timestamp}.png",
                        mime="image/png",
                        use_container_width=True
                    )
                else:
                    st.warning("‚ö†Ô∏è Nie uda≈Ço siƒô wygenerowaƒá obrazu fiszek.")
                
                # Wy≈õwietl fiszki w expanderach
                for i, card in enumerate(st.session_state.flashcards_data["flashcards"], 1):
                    with st.expander(f"üÉè Fiszka {i}: {card.get('word', 'N/A')}"):
                        st.markdown(f"**Definicja:** {card.get('definition', 'N/A')}")
                        st.markdown(f"**Przyk≈Çad:** {card.get('example', 'N/A')}")
            else:
                st.error("‚ùå Nie uda≈Ço siƒô wygenerowaƒá fiszek. Sprawd≈∫ tekst i spr√≥buj ponownie.")

    def render_pronunciation_section(self):
        
        # ≈Åadna ramka dla wymowy
        with st.container():
            st.markdown("""
            <style>
            .pronunciation-box {
                background-color: #f0f2f6;
                border: 2px solid #1f77b4;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            </style>
            """, unsafe_allow_html=True)
            
            st.write("Nagraj swojƒÖ wymowƒô, aby przeanalizowaƒá poprawno≈õƒá:")
            
            # Wyb√≥r jƒôzyka
            language = st.selectbox(
                "Jƒôzyk", 
                ["Polish", "English", "German", "French", "Spanish", "Italian", "Arabic", "Chinese", "Japanese"], 
                index=0, 
                key="pronunciation_lang"
            )
            
            # üìö Generuj s≈Çowa do ƒáwicze≈Ñ
            st.markdown("**üìö Generuj s≈Çowa do ƒáwicze≈Ñ**")
            
            practice_type = st.selectbox(
                "Typ ƒáwicze≈Ñ",
                ["S≈Çowa podstawowe", "Zwroty codzienne", "Liczby", "Kolory", "Cz≈Çonkowie rodziny"],
                key="practice_type"
            )
            
            if st.button("üéØ Generuj s≈Çowa do ƒáwicze≈Ñ", type="primary", use_container_width=True):
                # Zwiƒôksz licznik ≈ºeby wygenerowaƒá inne s≈Ç√≥wka
                if 'word_generation_counter' not in st.session_state:
                    st.session_state.word_generation_counter = 0
                st.session_state.word_generation_counter += 1
                self.generate_practice_words(language, practice_type, st.session_state.word_generation_counter)
            
            # Wy≈õwietl s≈Çowa do ƒáwicze≈Ñ je≈õli sƒÖ wygenerowane (zawsze widoczne)
            if hasattr(st.session_state, 'practice_words_result') and st.session_state.practice_words_result:
                st.markdown(f"""
                <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; border-left: 5px solid #6f42c1; margin: 20px 0;">
                    <h4 style="margin: 0 0 15px 0; color: #6f42c1;">üìö {st.session_state.practice_words_display_type} ({st.session_state.practice_words_language}):</h4>
                    <div style="font-size: 16px; line-height: 1.0; margin: 0; white-space: pre-line; padding: 5px 0;">{st.session_state.practice_words_result}</div>
                </div>
                """, unsafe_allow_html=True)
            
            if st.button("üî¥ Rozpocznij nagrywanie", key="start_recording", type="secondary", use_container_width=True):
                try:
                    # Inicjalizacja SpeechRecognitionManager
                    if not hasattr(self, 'speech_manager'):
                        self.speech_manager = SpeechRecognitionManager()
                    
                    # Inicjalizacja SpeechRecognitionManager
                    if not hasattr(self, 'speech_manager'):
                        self.speech_manager = SpeechRecognitionManager()
                    
                    # Poka≈º informacjƒô o rozpoczƒôciu nagrywania
                    st.info("üéôÔ∏è Rozpoczynam nagrywanie... M√≥w do mikrofonu!")
                    
                    # Nagrywanie z timeout
                    recorded_text = self.speech_manager.get_audio_from_microphone()
                    
                    if recorded_text:
                        # Zapisuj tekst w practice_text
                        st.session_state.practice_text = recorded_text
                        # Zwiƒôksz licznik wersji mikrofonu
                        st.session_state.practice_mic_version += 1
                        st.success("‚úÖ Nagranie zako≈Ñczone!")
                        st.info(f"üé§ Rozpoznany tekst: **{recorded_text}**")
                        
                        # Automatyczna analiza wymowy po nagraniu
                        st.markdown("**üéØ Analiza wymowy z nagrania**")
                        # Zapisz analizƒô w session state
                        analysis_result = self.analyze_pronunciation(language, recorded_text)
                        if analysis_result:
                            st.session_state.last_pronunciation_analysis = analysis_result
                            # Wy≈õwietl analizƒô
                            st.markdown(f"""
                            <div style="background-color: #e8f4fd; padding: 20px; border-radius: 10px; border-left: 5px solid #1f77b4; margin: 20px 0;">
                                <h4 style="margin: 0 0 15px 0; color: #1f77b4;">üé§ Analiza wymowy:</h4>
                                <div style="font-size: 16px; line-height: 1.6; margin: 0; white-space: pre-line;">{analysis_result}</div>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.error("‚ùå Nie uda≈Ço siƒô rozpoznaƒá mowy. Spr√≥buj ponownie.")
                            
                except Exception as e:
                    st.error(f"‚ùå B≈ÇƒÖd podczas nagrywania: {str(e)}")
            

            


    def generate_practice_words(self, language: str, practice_type: str, generation_counter: int = 0):
        """Generuje s≈Çowa do ƒáwiczenia wymowy"""
        try:
            # Dodaj r√≥≈ºnorodno≈õƒá na podstawie licznika
            variety_instructions = [
                "U≈ºywaj prostych, podstawowych s≈Ç√≥w",
                "U≈ºywaj s≈Ç√≥w ≈õredniego poziomu trudno≈õci",
                "U≈ºywaj bardziej zaawansowanych s≈Ç√≥w",
                "U≈ºywaj s≈Ç√≥w z r√≥≈ºnych dziedzin ≈ºycia",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z podr√≥≈ºowaniem",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z jedzeniem",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z pracƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z rodzinƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z hobby",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z technologiƒÖ"
            ]
            
            variety_instruction = variety_instructions[generation_counter % len(variety_instructions)]
            
            prompts = {
                "S≈Çowa podstawowe": f"Generate 5 basic words in {language}. {variety_instruction}. Format: 1. Word1 2. Word2 3. Word3 4. Word4 5. Word5",
                "Zwroty codzienne": f"Generate 5 common daily phrases in {language}. {variety_instruction}. Format: 1. Phrase1 2. Phrase2 3. Phrase3 4. Phrase4 5. Phrase5",
                "Liczby": f"Generate numbers 1-10 in {language}. {variety_instruction}. Format: 1. Number1 2. Number2 3. Number3 4. Number4 5. Number5 6. Number6 7. Number7 8. Number8 9. Number9 10. Number10",
                "Kolory": f"Generate 8 basic colors in {language}. {variety_instruction}. Format: 1. Color1 2. Color2 3. Color3 4. Color4 5. Color5 6. Color6 7. Color7 8. Color8",
                "Cz≈Çonkowie rodziny": f"Generate 8 family members in {language}. {variety_instruction}. Format: 1. Member1 2. Member2 3. Member3 4. Member4 5. Member5 6. Member6 7. Member7 8. Member8",
            }
            prompt = prompts.get(practice_type, prompts["S≈Çowa podstawowe"])
            messages = [
                {"role": "system", "content": f"Jeste≈õ nauczycielem jƒôzyka {language}. Generujesz s≈Çowa do ƒáwiczenia wymowy. {variety_instruction}."},
                {"role": "user", "content": prompt},
            ]
            result = self.openai_handler.make_request(messages)
            if result:
                st.success("‚úÖ S≈Çowa do ƒáwicze≈Ñ wygenerowane!")
                # Zapamiƒôtaj wynik
                st.session_state.practice_words_result = result
                st.session_state.practice_words_display_type = practice_type
                st.session_state.practice_words_language = language
                

                

            else:
                st.error("‚ùå Nie uda≈Ço siƒô wygenerowaƒá s≈Ç√≥w do ƒáwicze≈Ñ.")
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas generowania s≈Ç√≥w: {e}")

    def analyze_pronunciation(self, language: str, recorded_text: str):
        """Analizuje wymowƒô na podstawie nagranego tekstu - szybsza wersja"""
        try:
            # Kr√≥tszy prompt dla szybszej analizy
            prompt = f"""
            Kr√≥tko przeanalizuj wymowƒô w jƒôzyku {language}.
            Tekst: "{recorded_text}"
            Format (kr√≥tko):
            **Ocena:** X/10
            **B≈Çƒôdy:** [2-3 g≈Ç√≥wne]
            **Wskaz√≥wki:** [2-3 konkretne]
            **ƒÜwiczenia:** [2-3 ƒáwiczenia]
            """
            messages = [
                {"role": "system", "content": f"Jeste≈õ ekspertem od wymowy jƒôzyka {language}. Odpowiadaj kr√≥tko i konkretnie."},
                {"role": "user", "content": prompt},
            ]
            
            # Dodaj timeout do request
            with st.spinner("üîç Szybka analiza wymowy..."):
                result = self.openai_handler.make_request(messages)
                
            if result:
                return result
            else:
                st.error("‚ùå Nie uda≈Ço siƒô przeanalizowaƒá wymowy.")
                return None
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas analizy wymowy: {e}")
            return None

    def _analyze_pronunciation_from_transcription(self, transcription_text: str, language: str):
        """Analizuje wymowƒô na podstawie transkrypcji tekstu"""
        if not transcription_text.strip():
            st.warning("Brak tekstu do analizy.")
            return
        
        st.session_state.request_count += 1
        
        with st.spinner("üîç Szybka analiza wymowy..."):
            prompt = (
                f"Kr√≥tko przeanalizuj wymowƒô w jƒôzyku {language}.\n"
                f"Tekst: \"{transcription_text}\"\n"
                "Format (kr√≥tko):\n"
                "**Ocena:** X/10\n"
                "**B≈Çƒôdy:** [2-3 g≈Ç√≥wne]\n"
                "**Wskaz√≥wki:** [2-3 konkretne]\n"
                "**ƒÜwiczenia:** [2-3 ƒáwiczenia]"
            )
            
            messages = [
                {"role": "system", "content": f"Jeste≈õ ekspertem od wymowy jƒôzyka {language}."},
                {"role": "user", "content": prompt},
            ]
            
            result = self.openai_handler.make_request(messages)
            
            if result:
                st.success("‚úÖ Analiza wymowy gotowa!")
                # Wy≈õwietl wynik w ≈Çadnej ramce
                st.markdown(f"""
                <div class="pronunciation-box">
                    <h4 style="color: #1f77b4; margin-top: 0;">üé§ Analiza wymowy:</h4>
                    {result}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.error("‚ùå Nie uda≈Ço siƒô przeanalizowaƒá wymowy.")

    def _analyze_pronunciation_audio(self, audio_data, language: str):
        """Analizuje wymowƒô na podstawie nagrania audio"""
        st.session_state.request_count += 1
        
        with st.spinner("üîç Szybka analiza wymowy..."):
            prompt = (
                f"Kr√≥tko przeanalizuj wymowƒô w jƒôzyku {language}.\n"
                f"U≈ºytkownik nagra≈Ç audio.\n"
                "Format (kr√≥tko):\n"
                "**Ocena:** X/10\n"
                "**B≈Çƒôdy:** [2-3 g≈Ç√≥wne]\n"
                "**Wskaz√≥wki:** [2-3 konkretne]\n"
                "**ƒÜwiczenia:** [2-3 ƒáwiczenia]"
            )
            
            messages = [
                {"role": "system", "content": f"Jeste≈õ ekspertem od wymowy jƒôzyka {language}."},
                {"role": "user", "content": prompt},
            ]
            
            result = self.openai_handler.make_request(messages)
            
            if result:
                st.success("‚úÖ Analiza wymowy gotowa!")
                # Wy≈õwietl wynik w ≈Çadnej ramce
                st.markdown(f"""
                <div class="pronunciation-box">
                    <h4 style="color: #1f77b4; margin-top: 0;">üé§ Analiza wymowy:</h4>
                    {result}
                </div>
                """, unsafe_allow_html=True)
                
                # TODO: Dodaƒá generowanie audio z przyk≈Çad√≥w wymowy w przysz≈Ço≈õci
                pass
            else:
                st.error("‚ùå Nie uda≈Ço siƒô przeanalizowaƒá wymowy.")

    def render_footer(self):
        """Renderowanie stopki"""
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; padding: 20px; color: #666;">
            <p>üåç Language Helper AI - Twoje narzƒôdzie do nauki jƒôzyk√≥w</p>
            <p>Stworzone z ‚ù§Ô∏è w Python i Streamlit</p>
        </div>
        """, unsafe_allow_html=True)

    def run(self):
        render_sidebar_and_setup()
        
        with st.spinner("üîë Inicjalizujƒô klienta OpenAI..."):
            self.client = get_openai_client(st.session_state.api_key)
        
        if not self.client:
            st.error("‚ùå Nie mo≈ºna zainicjalizowaƒá klienta OpenAI. Sprawd≈∫ klucz API.")
            return
        
        self.openai_handler = OpenAIHandler(self.client)
        self.translation_manager = TranslationManager(self.openai_handler)
        self.flashcard_manager = FlashcardManager(self.openai_handler)

        st.title("üåç Language Helper AI")
        st.markdown("---")
        
        self.render_translation_section()
        st.markdown("---")
        
        self.render_explanation_section()
        st.markdown("---")
        
        self.render_flashcard_section()
        st.markdown("---")
        
        # üé§ ƒÜWICZENIE WYMOWY - G≈Å√ìWNA SEKCJA
        st.header("üé§ ƒÜwiczenie wymowy")
        st.markdown("---")
        
        self.render_pronunciation_section()
        
        # Renderuj stopkƒô
        self.render_footer()

# --- URUCHOMIENIE ---
if __name__ == "__main__":
    try:
        init_session_state()
        app = MultilingualApp()
        app.run()
    except Exception as e:
        st.error("üö® **Krytyczny b≈ÇƒÖd aplikacji!**")
        st.error(f"**B≈ÇƒÖd:** {str(e)}")
        st.error("**Typ b≈Çƒôdu:** " + type(e).__name__)
