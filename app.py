# -*- coding: utf-8 -*-
import streamlit as st
from openai import OpenAI
import json
from datetime import datetime
from typing import Dict, List, Optional
import tiktoken
import io
import re
from audiorecorder import audiorecorder
from dotenv import load_dotenv
import os
import instructor
from pydantic import BaseModel
from pydub import AudioSegment  # Upewnij siƒô, ≈ºe pydub jest zaimportowany

# --- USTAWIENIA STRONY ---
st.set_page_config(
    page_title="Language Helper AI",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ustawienia kodowania dla Streamlit
# st.set_option('deprecation.showPyplotGlobalUse', False)  # Usuniƒôte - opcja nie istnieje w nowszych wersjach Streamlit

# Dodaj CSS dla lepszego wy≈õwietlania polskich znak√≥w
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
* {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}
</style>
""", unsafe_allow_html=True)

# --- INICJALIZACJA SESJI ---
def init_session_state():
    # Za≈Çaduj zmienne ≈õrodowiskowe
    load_dotenv()
    
    if 'api_key' not in st.session_state:
        # Sprawd≈∫ czy klucz jest w zmiennych ≈õrodowiskowych
        env_api_key = os.getenv('OPENAI_API_KEY')
        st.session_state.api_key = env_api_key if env_api_key else ""
    if 'total_tokens' not in st.session_state:
        st.session_state.total_tokens = 0
    if 'total_cost' not in st.session_state:
        st.session_state.total_cost = 0.0
    if 'token_history' not in st.session_state:
        st.session_state.token_history = []
    if 'cost_history' not in st.session_state:
        st.session_state.cost_history = []
    if 'setup_done' not in st.session_state:
        st.session_state.setup_done = False
    if 'request_count' not in st.session_state:
        st.session_state.request_count = 0
    if 'flashcards_data' not in st.session_state:
        st.session_state.flashcards_data = None
    if 'flashcards_image' not in st.session_state:
        st.session_state.flashcards_image = None
    if 'recorded_audio_text' not in st.session_state:
        st.session_state.recorded_audio_text = ""
    if 'translation_input_text' not in st.session_state:
        st.session_state.translation_input_text = ""
    if 'translated_text' not in st.session_state:
        st.session_state.translated_text = ""
    if 'practice_text' not in st.session_state:
        st.session_state.practice_text = ""
    if 'practice_mic_version' not in st.session_state:
        st.session_state.practice_mic_version = 0
    if 'recorded_audio' not in st.session_state:
        st.session_state.recorded_audio = None

# --- SIDEBAR & SETUP ---
def render_sidebar_and_setup():
    st.sidebar.title("üåç Language Helper AI")
    st.sidebar.markdown("---")
    
    # Klucz API
    st.sidebar.markdown("### üîë Klucz API OpenAI")
    
    # Sprawd≈∫ czy klucz jest w zmiennych ≈õrodowiskowych
    env_api_key = os.getenv('OPENAI_API_KEY')
    if env_api_key and not st.session_state.api_key:
        st.session_state.api_key = env_api_key
        st.sidebar.success("‚úÖ Klucz API za≈Çadowany z zmiennych ≈õrodowiskowych")
    
    api_key = st.sidebar.text_input(
        "Wprowad≈∫ sw√≥j klucz API OpenAI:",
        type="password",
        placeholder="sk-...",
        value=st.session_state.api_key,
        help="Tw√≥j klucz API OpenAI (zaczyna siƒô od 'sk-') lub ustaw OPENAI_API_KEY w zmiennych ≈õrodowiskowych"
    )
    
    if api_key != st.session_state.api_key:
        st.session_state.api_key = api_key
    
    if not api_key or not api_key.startswith("sk-"):
        st.sidebar.warning("Podaj poprawny klucz API (zaczyna siƒô od 'sk-') lub ustaw OPENAI_API_KEY w zmiennych ≈õrodowiskowych.")
        st.stop()
    
    # Motyw
    st.sidebar.markdown("### üé® Motyw")
    theme = st.sidebar.radio("Wybierz motyw", ["Jasny", "Ciemny"], index=0)
    if theme == "Ciemny":
        st.markdown("""
        <style>
        body, .stApp {background-color: #0e1117 !important; color: #fafafa !important;}
        </style>
        """, unsafe_allow_html=True)
    
    # Statystyki
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìä Statystyki API")
    st.sidebar.metric("Tokeny", f"{st.session_state.total_tokens:,}")
    st.sidebar.metric("Koszt", f"${st.session_state.total_cost:.4f}")
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Aplikacja:**")
    st.sidebar.markdown("üåç t≈Çumaczenia")
    st.sidebar.markdown("üìñ fiszki")
    st.sidebar.markdown("üìö wyja≈õnienia")
    st.sidebar.markdown("üé§ wymowa")
    st.sidebar.markdown("üéôÔ∏è nagrywanie audio")

# --- KOSZTY I TOKENY ---
def calculate_cost(model: str, input_tokens: int, output_tokens: int) -> float:
    pricing = {
        "gpt-4o": {"input": 0.005, "output": 0.015},
        "gpt-4o-mini": {"input": 0.00015, "output": 0.0006},
        "gpt-4": {"input": 0.03, "output": 0.06},
        "gpt-3.5-turbo": {"input": 0.0005, "output": 0.0015},
        "gpt-3.5-turbo-16k": {"input": 0.003, "output": 0.004},
        "tts-1": {"input": 0.015, "output": 0}
    }
    model_key = model if model in pricing else "gpt-4o"
    input_cost = (input_tokens / 1000) * pricing[model_key]["input"]
    output_cost = (output_tokens / 1000) * pricing[model_key]["output"]
    return input_cost + output_cost

def count_tokens(text: str, model: str = "gpt-4o") -> int:
    try:
        encoding = tiktoken.encoding_for_model(model)
        return len(encoding.encode(text))
    except:
        return len(text) // 4

@st.cache_resource
def get_openai_client(api_key: str):
    if not api_key:
        return None
    try:
        return OpenAI(api_key=api_key)
    except Exception as e:
        st.error(f"‚ùå B≈ÇƒÖd inicjalizacji OpenAI: {e}")
        return None

def update_usage_stats(input_tokens: int, output_tokens: int, model: str):
    total_tokens = input_tokens + output_tokens
    cost = calculate_cost(model, input_tokens, output_tokens)
    st.session_state.total_tokens += total_tokens
    st.session_state.total_cost += cost
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    st.session_state.token_history.append({
        "timestamp": timestamp,
        "input_tokens": input_tokens,
        "output_tokens": output_tokens,
        "total_tokens": total_tokens,
        "model": model
    })
    st.session_state.cost_history.append({
        "timestamp": timestamp,
        "cost": cost,
        "model": model
    })

# --- OPENAI HANDLER ---
class OpenAIHandler:
    def __init__(self, client: OpenAI):
        self.client = client
    
    def make_request(self, messages: List[Dict], model: str = "gpt-4o", temperature: float = 0.7, max_tokens: int = 1200) -> Optional[str]:
        try:
            response = self.client.chat.completions.create(
                model=model,
                messages=messages,
                temperature=temperature,
                max_tokens=max_tokens
            )
            output_text = response.choices[0].message.content
            input_text = " ".join([msg["content"] for msg in messages])
            input_tokens = count_tokens(input_text, model)
            output_tokens = count_tokens(output_text, model)
            update_usage_stats(input_tokens, output_tokens, model)
            return output_text
        except Exception as e:
            st.error(f"B≈ÇƒÖd API OpenAI: {str(e)}")
            return None
    
    def transcribe_audio(self, file_bytes: bytes, filename: str = "audio.wav", language_code: Optional[str] = None) -> Optional[str]:
        """Transkrypcja audio w chmurze (OpenAI)"""
        try:
            # Mapowanie jƒôzyk√≥w na kody ISO
            language_mapping = {
                "Polish": "pl",
                "English": "en", 
                "German": "de",
                "French": "fr",
                "Spanish": "es",
                "Italian": "it",
                "Arabic": "ar",
                "Chinese": "zh",
                "Japanese": "ja"
            }
            
            # Je≈õli podano kod jƒôzyka, u≈ºyj go
            if language_code:
                whisper_language = language_code
            else:
                # Automatyczne wykrywanie jƒôzyka
                whisper_language = None
            
            # Sprawd≈∫ format pliku
            file_extension = filename.lower().split('.')[-1] if '.' in filename else 'wav'
            
            # Obs≈Çugiwane formaty przez OpenAI Whisper
            supported_formats = ['mp3', 'mp4', 'mpeg', 'mpga', 'm4a', 'wav', 'webm']
            
            if file_extension not in supported_formats:
                st.warning(f"‚ö†Ô∏è Format {file_extension} mo≈ºe nie byƒá obs≈Çugiwany przez OpenAI Whisper. Zalecane: MP3, WAV, M4A")
            
            # Sprawd≈∫ czy plik nie jest pusty
            if len(file_bytes) == 0:
                st.error("‚ùå Plik audio jest pusty")
                return None
            
            # Sprawd≈∫ czy plik nie jest za du≈ºy (limit OpenAI: 25MB)
            if len(file_bytes) > 25 * 1024 * 1024:
                st.error("‚ùå Plik jest za du≈ºy (max 25MB)")
                return None
            
            # Transkrypcja audio - od razu z plikiem tymczasowym (bardziej niezawodne)
            try:
                st.info("üîÑ Transkrybujƒô audio...")
                import tempfile
                import os
                
                # Utw√≥rz plik tymczasowy
                with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
                    temp_file.write(file_bytes)
                    temp_file_path = temp_file.name
                
                # Transkrypcja z pliku na dysku
                with open(temp_file_path, 'rb') as file_obj:
                    response = self.client.audio.transcriptions.create(
                        model="whisper-1",
                        file=file_obj,
                        language="pl",  # Ustaw jƒôzyk polski
                        response_format="text"
                    )
                
                # Usu≈Ñ plik tymczasowy
                os.unlink(temp_file_path)
                st.success("‚úÖ Transkrypcja udana!")
                
            except Exception as transcribe_error:
                st.error(f"‚ùå B≈ÇƒÖd podczas transkrypcji: {str(transcribe_error)}")
                return None
            
            # Aktualizacja statystyk u≈ºycia (Whisper nie zwraca token√≥w)
            update_usage_stats(0, 0, "whisper-1")
            
            return response
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas transkrypcji audio: {str(e)}")
            return None

# --- MODELE PYDANTIC ---
class Flashcard(BaseModel):
    word: str
    definition: str
    example: str

class FlashcardSet(BaseModel):
    flashcards: List[Flashcard]



# --- AUDIO RECORDER MANAGER ---
class AudioRecorderManager:
    """ZarzƒÖdzanie nagrywaniem audio u≈ºywajƒÖc audiorecorder"""

    def __init__(self):
        pass

    def record_audio(self) -> Optional[bytes]:
        """Nagrywanie audio z mikrofonu u≈ºywajƒÖc audiorecorder"""
        try:
            # U≈ºyj audiorecorder do nagrania
            audio = audiorecorder(
                "üéôÔ∏è Kliknij aby rozpoczƒÖƒá nagrywanie", 
                "‚èπÔ∏è Kliknij aby zatrzymaƒá", 
                key=f"audio_recorder_{st.session_state.get('request_count', 0)}"
            )

            if audio is not None and len(audio) > 0:
                # Eksportuj dane audio do formatu WAV
                audio_bytes_io = io.BytesIO()
                audio.export(audio_bytes_io, format="wav")
                audio_bytes = audio_bytes_io.getvalue()

                # Wy≈õwietl audio w Streamlit
                st.audio(audio_bytes, format="audio/wav")

                return audio_bytes
            else:
                st.warning("‚ö†Ô∏è Brak danych audio do przetworzenia.")
                return None

        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas nagrywania: {str(e)}")
            return None
    
    def save_audio_to_session(self, audio_bytes: bytes):
        """Zapisuje nagrane audio w session state"""
        if audio_bytes:
            st.session_state.recorded_audio = audio_bytes
            return True
        return False

# --- TRANSLATION MANAGER ---
class TranslationManager:
    def __init__(self, openai_handler: OpenAIHandler):
        self.openai_handler = openai_handler
    
    def translate_text(self, text: str, target_language: str, correct_errors: bool = False, improve_style: bool = False) -> Optional[Dict]:
        """T≈Çumaczy tekst z opcjonalnƒÖ korektƒÖ b≈Çƒôd√≥w i poprawƒÖ stylistyki."""
        try:
            prompt = (
                f"Przet≈Çumacz poni≈ºszy tekst na jƒôzyk {target_language}."
                + (" Najpierw popraw b≈Çƒôdy gramatyczne i stylistyczne, a potem przet≈Çumacz." if correct_errors else "")
                + (" Najpierw popraw stylistykƒô i p≈Çynno≈õƒá tekstu, a potem przet≈Çumacz." if improve_style else "")
                + "\nOdpowiadaj tylko t≈Çumaczeniem, bez wyja≈õnie≈Ñ."
                + f"\nTekst: {text}"
            )
            
            messages = [
                {"role": "system", "content": "Jeste≈õ profesjonalnym t≈Çumaczem i nauczycielem jƒôzyk√≥w."},
                {"role": "user", "content": prompt}
            ]
            
            result = self.openai_handler.make_request(messages)
            
            if result:
                return {
                    "translation": result,
                    "original_text": text,
                    "target_language": target_language,
                    "corrected_errors": correct_errors,
                    "improved_style": improve_style
                }
            return None
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas t≈Çumaczenia: {str(e)}")
            return None
    
    def generate_audio(self, text: str, language: str = "en", voice: str = "alloy") -> Optional[bytes]:
        """Generuje audio z tekstu u≈ºywajƒÖc OpenAI TTS."""
        try:
            # Mapowanie jƒôzyk√≥w na kody TTS
            language_mapping = {
                "Polish": "pl",
                "English": "en", 
                "German": "de",
                "French": "fr",
                "Spanish": "es",
                "Italian": "it",
                "Arabic": "ar",
                "Chinese": "zh",
                "Japanese": "ja"
            }
            
            tts_language = language_mapping.get(language, "en")
            
            # Generowanie audio przez OpenAI TTS
            response = self.openai_handler.client.audio.speech.create(
                model="tts-1",
                voice=voice,  # Mo≈ºna zmieniƒá na: alloy, echo, fable, onyx, nova, shimmer
                input=text,
                response_format="mp3"
            )
            
            # Pobieranie audio
            audio_content = response.content
            
            # Aktualizacja statystyk u≈ºycia
            input_tokens = count_tokens(text, "tts-1")
            update_usage_stats(input_tokens, 0, "tts-1")
            
            return audio_content
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas generowania audio: {str(e)}")
            return None

# --- FISZKI ---
class FlashcardManager:
    def __init__(self, openai_handler: OpenAIHandler):
        self.openai_handler = openai_handler
        # Inicjalizacja instructor client
        try:
            self.instructor_client = instructor.from_openai(openai_handler.client)
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd inicjalizacji instructor: {e}")
            self.instructor_client = None

    def generate_flashcards(self, text: str, definition_language: str) -> Optional[Dict]:
        """Generuje fiszki u≈ºywajƒÖc instructor dla strukturyzowanych odpowiedzi"""
        try:
            if not self.instructor_client:
                st.error("‚ùå Instructor nie jest dostƒôpny. U≈ºywam standardowej metody.")
                return self._generate_flashcards_fallback(text, definition_language)
            
            prompt = (
                f"WydobƒÖd≈∫ 4-6 najwa≈ºniejszych (kluczowych) s≈Ç√≥w z poni≈ºszego tekstu. "
                f"Dla ka≈ºdego s≈Çowa wygeneruj fiszkƒô z KROTKƒÑ definicjƒÖ w jƒôzyku {definition_language} "
                f"(max 3-4 s≈Çowa) i KROTKIM przyk≈Çadowym zdaniem (max 6-8 s≈Ç√≥w) w oryginalnym jƒôzyku.\n\n"
                f"Definicje i przyk≈Çady powinny byƒá bardzo kr√≥tkie, ≈ºeby mie≈õci≈Çy siƒô w ramce fiszki.\n\n"
                f"Tekst: {text}"
            )
            
            messages = [
                {"role": "system", "content": "Jeste≈õ nauczycielem jƒôzyk√≥w. Generujesz fiszki do nauki s≈Ç√≥wek."},
                {"role": "user", "content": prompt}
            ]
            
            # U≈ºyj instructor do strukturyzowanej odpowiedzi
            result = self.instructor_client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                response_model=FlashcardSet,
                max_tokens=800
            )
            
            # Konwertuj na format s≈Çownika
            flashcards_data = {
                "flashcards": [
                    {
                        "word": card.word,
                        "definition": card.definition,
                        "example": card.example
                    }
                    for card in result.flashcards
                ]
            }
            
            return flashcards_data
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas generowania fiszek z instructor: {str(e)}")
            st.info("U≈ºywam metody fallback...")
            return self._generate_flashcards_fallback(text, definition_language)

    def _generate_flashcards_fallback(self, text: str, definition_language: str) -> Optional[Dict]:
        """Metoda fallback bez instructor"""
        prompt = (
            f"WydobƒÖd≈∫ 4-6 najwa≈ºniejszych (kluczowych) s≈Ç√≥w z poni≈ºszego tekstu. Nie wybieraj pojedynczych liter ani s≈Ç√≥w nieistotnych.\n"
            f"Dla ka≈ºdego s≈Çowa wygeneruj fiszkƒô w formacie JSON:\n"
            f"- word: oryginalne s≈Çowo\n"
            f"- definition: KROTKA definicja w jƒôzyku {definition_language} (max 3-4 s≈Çowa)\n"
            f"- example: KROTKIE przyk≈Çadowe zdanie (max 6-8 s≈Ç√≥w) z tym s≈Çowem w oryginalnym jƒôzyku\n"
            "Definicje i przyk≈Çady powinny byƒá bardzo kr√≥tkie, ≈ºeby mie≈õci≈Çy siƒô w ramce fiszki.\n"
            "Odpowiadaj TYLKO i wy≈ÇƒÖcznie w formacie JSON, bez ≈ºadnych wyja≈õnie≈Ñ, komentarzy, tekstu przed ani po JSON.\n"
            "Przyk≈Çad odpowiedzi:\n"
            '{"flashcards": ['
            '{"word": "kot", "definition": "domowe zwierzƒô", "example": "Mam kota."},'
            '{"word": "pies", "definition": "wierny towarzysz", "example": "Pies szczeka."}'
            ']}\n'
            "Tekst:\n" + text
        )
        
        try:
            messages = [
                {"role": "system", "content": "You are a language teacher. Respond ONLY in JSON format, no extra text."},
                {"role": "user", "content": prompt}
            ]
            result = self.openai_handler.make_request(messages, max_tokens=800)
            
            if not result:
                st.error("‚ùå OpenAI zwr√≥ci≈Ço pustƒÖ odpowied≈∫. Spr√≥buj ponownie lub zmie≈Ñ prompt.")
                return None
                
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas generowania: {str(e)}")
            return None

        try:
            if isinstance(result, dict):
                parsed_result = result
            else:
                cleaned = result.strip()
                # Usu≈Ñ p≈Çotki Markdown i wyciƒÖgnij blok JSON
                if cleaned.startswith("```json"):
                    cleaned = cleaned[len("```json"):].strip()
                if cleaned.startswith("```"):
                    cleaned = cleaned[len("```"):].strip()
                if cleaned.endswith("```"):
                    cleaned = cleaned[:-3].strip()
                
                # Je≈õli nadal nie zaczyna siƒô od '{', wyciƒÖgnij blok JSON regexem
                if not cleaned.startswith("{"):
                    match = re.search(r"\{[\s\S]*\}", cleaned)
                    if match:
                        cleaned = match.group(0)
                
                parsed_result = json.loads(cleaned, encoding="utf-8")
            
            if not isinstance(parsed_result, dict) or "flashcards" not in parsed_result:
                st.error("‚ùå Odpowied≈∫ nie zawiera klucza 'flashcards'. Odpowied≈∫:")
                st.code(result)
                return None
            
            return parsed_result
            
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd parsowania JSON: {e}")
            st.info(f"Odpowied≈∫ OpenAI (debug, typ: {type(result)}):")
            st.code(result)
            return None



    def generate_images(self, flashcards_data: Dict, size_choice: str = "Du≈ºe (800√ó600)", format_choice: str = "PNG (najlepsza jako≈õƒá)", quality_choice: str = "Wysoka") -> Optional[bytes]:
        try:
            from PIL import Image, ImageDraw, ImageFont
            import io
        except ImportError:
            st.error("‚ùå Brak biblioteki Pillow. Zainstaluj: pip install Pillow")
            return None

        try:
            flashcards = flashcards_data.get("flashcards", [])
            if not flashcards:
                st.error("‚ùå Brak danych fiszek do wygenerowania obraz√≥w")
                return None

            card_width, card_height = 400, 280
            margin = 25
            font_large_size, font_medium_size, font_small_size = 18, 14, 11

            max_cards = 4
            cards_per_row = 2
            cards_per_col = min(2, (len(flashcards) + 1) // 2)
            total_width = cards_per_row * card_width + (cards_per_row + 1) * margin
            total_height = cards_per_col * card_height + (cards_per_col + 1) * margin + 80

            img = Image.new('RGB', (total_width, total_height), color='white')
            draw = ImageDraw.Draw(img)

            def _load_font_with_fallback(size: int):
                try:
                    return ImageFont.truetype("arial.ttf", size)
                except Exception:
                    return ImageFont.load_default()

            font_large = _load_font_with_fallback(font_large_size)
            font_medium = _load_font_with_fallback(font_medium_size)
            font_small = _load_font_with_fallback(font_small_size)

            title = "üìö Fiszki do nauki"
            title_bbox = draw.textbbox((0, 0), title, font=font_large)
            title_width = title_bbox[2] - title_bbox[0]
            title_x = (total_width - title_width) // 2
            draw.text((title_x, 15), title, fill='#1f77b4', font=font_large)

            for i, card in enumerate(flashcards[:max_cards]):
                row = i // cards_per_row
                col = i % cards_per_row
                x = margin + col * (card_width + margin)
                y = 70 + row * (card_height + margin)
                
                # Najpierw rysuj cie≈Ñ (szary)
                shadow_offset = 3
                draw.rectangle([x + shadow_offset, y + shadow_offset, x + card_width + shadow_offset, y + card_height + shadow_offset], 
                             outline='#c0c0c0', width=1, fill='#e0e0e0')
                
                # Potem rysuj bia≈ÇƒÖ fiszkƒô na g√≥rze z czarnym obramowaniem
                draw.rectangle([x, y, x + card_width, y + card_height], outline='black', width=2, fill='white')
                # Dodaj niebieskie obramowanie wewnƒôtrzne
                draw.rectangle([x+2, y+2, x + card_width-2, y + card_height-2], outline='#1f77b4', width=1, fill='white')
                
                left_margin = x + 15
                word = card.get("word", "")[:25]
                
                # S≈Çowo - pogrubione i w kolorze
                draw.text((left_margin, y + 15), "S≈ÅOWO:", fill='#1f77b4', font=font_medium)
                draw.text((left_margin + 80, y + 15), word, fill='#2c3e50', font=font_medium)
                
                # Linia oddzielajƒÖca
                line_y = y + 45
                draw.line([left_margin, line_y, x + card_width - 15, line_y], fill='#1f77b4', width=2)
                
                definition = card.get("definition", "")[:50]
                def_y = y + card_height//2 + 15
                draw.text((left_margin, def_y), "DEFINICJA:", fill='#1f77b4', font=font_small)
                draw.text((left_margin + 100, def_y), definition, fill='#333', font=font_small)
                
                example = card.get("example", "")[:45]
                ex_y = def_y + 40
                draw.text((left_margin, ex_y), "PRZYK≈ÅAD:", fill='#1f77b4', font=font_small)
                draw.text((left_margin + 100, ex_y), example, fill='#666', font=font_small)

            bio = io.BytesIO()
            try:
                if "JPG" in format_choice:
                    img.save(bio, format='JPEG', quality=85, optimize=True)
                else:
                    img.save(bio, format='PNG', optimize=True)
                bio.seek(0)
                return bio.getvalue()
            except Exception as save_error:
                st.error(f"‚ùå B≈ÇƒÖd podczas zapisywania obrazu: {save_error}")
                return None

        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd generowania obraz√≥w: {str(e)}")
            return None

# --- G≈Å√ìWNA APLIKACJA ---
class MultilingualApp:
    def __init__(self):
        self.flashcard_manager = None
        self.client = None
        self.openai_handler = None
        self.translation_manager = None

    def generate_practice_words(self, language: str, practice_type: str, generation_counter: int = 0):
        """Generuje s≈Çowa do ƒáwiczenia wymowy"""
        try:
            # Zwiƒôksz licznik generowania dla wiƒôkszej r√≥≈ºnorodno≈õci
            if 'practice_generation_count' not in st.session_state:
                st.session_state.practice_generation_count = 0
            st.session_state.practice_generation_count += 1
            
            # Dodaj r√≥≈ºnorodno≈õƒá na podstawie licznika i losowo≈õci
            import random
            
            variety_instructions = [
                "U≈ºywaj prostych, podstawowych s≈Ç√≥w",
                "U≈ºywaj s≈Ç√≥w ≈õredniego poziomu trudno≈õci", 
                "U≈ºywaj bardziej zaawansowanych s≈Ç√≥w",
                "U≈ºywaj s≈Ç√≥w z r√≥≈ºnych dziedzin ≈ºycia",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z podr√≥≈ºowaniem",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z jedzeniem",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z pracƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z rodzinƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z hobby",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z technologiƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z naturƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z muzykƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z sportem",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z edukacjƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z emocjami",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z czasem",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z pogodƒÖ",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z domem",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z ubraniami",
                "U≈ºywaj s≈Ç√≥w zwiƒÖzanych z transportem"
            ]
            
            # Losowo wybierz instrukcjƒô + dodaj licznik
            random.shuffle(variety_instructions)
            variety_instruction = variety_instructions[0]
            
            # Dodaj losowe elementy do prompt√≥w
            random_elements = [
                "Dodaj s≈Çowa z r√≥≈ºnych rejon√≥w geograficznych",
                "Uwzglƒôdnij s≈Çowa formalne i nieformalne",
                "Mieszaj s≈Çowa kr√≥tkie i d≈Çugie",
                "Dodaj s≈Çowa z r√≥≈ºnych styl√≥w jƒôzykowych",
                "Uwzglƒôdnij s≈Çowa z r√≥≈ºnych epok",
                "Mieszaj s≈Çowa proste i z≈Ço≈ºone",
                "Dodaj s≈Çowa z r√≥≈ºnych dialekt√≥w",
                "Uwzglƒôdnij s≈Çowa z r√≥≈ºnych rejestr√≥w"
            ]
            
            random.shuffle(random_elements)
            additional_instruction = random_elements[0]
            
            prompts = {
                "S≈Çowa podstawowe": f"Generate 5 VERY SIMPLE, BASIC words in {language}. Use only beginner-level words that a child would know. Examples: book, tree, car, food, water, door, table, phone, friend, music. {variety_instruction}. {additional_instruction}. Format: 1. Word1 2. Word2 3. Word3 4. Word4 5. Word5",
                "Zwroty codzienne": f"Generate 5 SIMPLE daily phrases in {language}. Use only basic, everyday expressions. Examples: Good morning, How are you, Thank you, Please help, I'm sorry. {variety_instruction}. {additional_instruction}. Format: 1. Phrase1 2. Phrase2 3. Phrase3 4. Phrase4 5. Phrase5",
                "Liczby": f"Generate 10 RANDOM and DISTINCT number WORDS between 0 and 100 (inclusive) in {language}. Use ONLY number words (no digits), NO duplicates, random order (do not sort). STRICT RULES: Output ONLY number words; DO NOT output any other categories like family, colors, objects, etc. Examples (English): zero, one, two, ten, twenty, thirty-five, forty-two, fifty, seventy-eight, one hundred. Format: 1. Word1 2. Word2 3. Word3 4. Word4 5. Word5 6. Word6 7. Word7 8. Word8 9. Word9 10. Word10",
                "Kolory": f"Generate 8 BASIC colors in {language}. Use only simple, common colors. Examples: red, blue, green, yellow, black, white, brown, pink. {variety_instruction}. {additional_instruction}. Format: 1. Color1 2. Color2 3. Color3 4. Color4 5. Color5 6. Color6 7. Color7 8. Color8",
                "Cz≈Çonkowie rodziny": f"Generate 8 BASIC family members in {language}. Use only simple family words. Examples: mother, father, sister, brother, grandmother, grandfather, aunt, uncle. {variety_instruction}. {additional_instruction}. Format: 1. Member1 2. Member2 3. Member3 4. Member4 5. Member5 6. Member6 7. Member7 8. Member8",
            }
            
            prompt = prompts.get(practice_type, prompts["S≈Çowa podstawowe"])
            
            # Dodaj informacjƒô o liczniku generowania
            prompt += f"\n\nWa≈ºne: To jest generowanie #{st.session_state.practice_generation_count}. U≈ºywaj r√≥≈ºnych s≈Ç√≥w ni≈º w poprzednich generowaniach."
            
            if practice_type == "Liczby":
                system_content = (
                    f"Jeste≈õ nauczycielem jƒôzyka {language} dla poczƒÖtkujƒÖcych. "
                    f"GENERUJ WY≈ÅƒÑCZNIE NAZWY LICZB (s≈Çownie) z zakresu 0‚Äì100. "
                    f"Zakazane sƒÖ inne kategorie (rodzina, kolory, obiekty itp.). "
                    f"Odpowiadaj TYLKO listƒÖ pozycji w podanym formacie, bez wyja≈õnie≈Ñ."
                )
            else:
                system_content = (
                    f"Jeste≈õ nauczycielem jƒôzyka {language} dla poczƒÖtkujƒÖcych. Generujesz TYLKO bardzo proste, podstawowe s≈Çowa i zwroty - takie jakich uczy siƒô dzieci w wieku 6-10 lat. "
                    f"{variety_instruction}. {additional_instruction}. Zawsze generuj r√≥≈ºne s≈Çowa ni≈º w poprzednich generowaniach. NIGDY nie u≈ºywaj zaawansowanych, trudnych s≈Ç√≥w."
                )

            messages = [
                {"role": "system", "content": system_content},
                {"role": "user", "content": prompt},
            ]
            
            result = self.openai_handler.make_request(messages)
            if result:
                st.success(f"‚úÖ S≈Çowa do ƒáwicze≈Ñ wygenerowane! (Generowanie #{st.session_state.practice_generation_count})")
                # Zapamiƒôtaj wynik
                st.session_state.practice_words_result = result
                st.session_state.practice_words_display_type = practice_type
                st.session_state.practice_words_language = language
            else:
                st.error("‚ùå Nie uda≈Ço siƒô wygenerowaƒá s≈Ç√≥w do ƒáwicze≈Ñ.")
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas generowania s≈Ç√≥w: {e}")

    def analyze_pronunciation(self, language: str, recorded_text: str):
        """Analizuje wymowƒô na podstawie nagranego tekstu - szybsza wersja"""
        try:
            # Sprawd≈∫ czy openai_handler jest dostƒôpny
            if not hasattr(self, 'openai_handler') or not self.openai_handler:
                return None
            
            # Sprawd≈∫ czy tekst nie jest pusty
            if not recorded_text or not recorded_text.strip():
                return None
            
            # Kr√≥tszy prompt dla szybszej analizy
            prompt = f"""
            Kr√≥tko przeanalizuj wymowƒô w jƒôzyku {language}.
            Tekst: "{recorded_text}"
            Format (kr√≥tko):
            **Ocena:** X/10
            **B≈Çƒôdy:** [2-3 g≈Ç√≥wne]
            **Wskaz√≥wki:** [2-3 konkretne]
            """
            
            messages = [
                {"role": "system", "content": f"Jeste≈õ ekspertem od wymowy jƒôzyka {language}. Analizujesz wymowƒô i dajesz konkretne wskaz√≥wki."},
                {"role": "user", "content": prompt}
            ]
            
            result = self.openai_handler.make_request(messages, max_tokens=400)
            return result
            
        except Exception as e:
            return None

    def render_translation_section(self):
        st.header("üåç T≈Çumaczenie tekstu")
        
        # ≈Åadna ramka dla t≈Çumaczenia
        with st.container():
            st.markdown("""
            <style>
            .translation-box {
                background-color: #f0f2f6;
                border: 2px solid #1f77b4;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            </style>
            """, unsafe_allow_html=True)
            
            # U g√≥ry - wyb√≥r jƒôzyka
            target_lang = st.selectbox(
                "Jƒôzyk docelowy",
                ["English", "German", "French", "Spanish", "Italian"],
                index=0,
                help="Wybierz jƒôzyk na kt√≥ry chcesz przet≈Çumaczyƒá tekst"
            )
            
            # Pod tym - text area spiƒôty z session_state
            st.session_state.translation_input_text = st.text_area(
                "Wpisz tekst do przet≈Çumaczenia:",
                value=st.session_state.translation_input_text,
                height=120,
                key="translation_input_text_area",
                placeholder="Nagraj audio lub wpisz tekst do przet≈Çumaczenia..."
            )
            
            # Pod spodem - nagrywanie + opcje poprawy
            col1, col2 = st.columns([1, 1])
            
            with col1:
                # Opcje poprawy
                correct_errors = st.checkbox("Popraw b≈Çƒôdy gramatyczne", value=False, help="Automatycznie popraw b≈Çƒôdy przed t≈Çumaczeniem")
                improve_style = st.checkbox("Popraw stylistykƒô", value=False, help="Popraw stylistykƒô i p≈Çynno≈õƒá tekstu")
            
            with col2:
                # Nagrywanie audio
                st.markdown("### üéôÔ∏è Nagrywanie")
                
                try:
                    from audiorecorder import audiorecorder
                    from pydub import AudioSegment  # Upewnij siƒô, ≈ºe pydub jest zaimportowany

                    # Nagrywanie audio - jeden przycisk
                    audio_data = audiorecorder(
                        "üî¥ Kliknij aby rozpoczƒÖƒá nagrywanie",
                        "‚èπÔ∏è Kliknij aby zatrzymaƒá",
                        key="translation_voice_recorder"
                    )

                    if audio_data is not None and len(audio_data) > 0:
                        # Nie czy≈õƒá pola tekstowego u≈ºytkownika przy nowym nagraniu
                        st.success("‚úÖ **Nagranie zako≈Ñczone!**")
                        # Konwersja AudioSegment na dane binarne (bytes)
                        try:
                            import tempfile
                            import os
                            # Utw√≥rz plik tymczasowy WAV (jak w ƒáwiczeniu wymowy)
                            with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
                                audio_data.export(temp_file, format="wav")
                                temp_file_path = temp_file.name
                            # Wy≈õwietl audio z pliku tymczasowego
                            st.audio(temp_file_path, format="audio/wav")
                            st.success("‚úÖ Audio przygotowane do transkrypcji")
                            
                            # Zapisz ≈õcie≈ºkƒô do pliku tymczasowego w session state
                            st.session_state.temp_translation_audio_file = temp_file_path
                            # Przygotuj bytes dla transkrypcji
                            with open(temp_file_path, 'rb') as audio_file:
                                audio_bytes = audio_file.read()
                            
                        except Exception as export_error:
                            st.error(f"‚ùå B≈ÇƒÖd eksportu audio: {str(export_error)}")
                            st.error(f"üîç Typ b≈Çƒôdu: {type(export_error).__name__}")
                            return
                        # Przycisk do transkrypcji audio
                        if st.button("üéß Transkrybuj nagranie audio", type="secondary", key="transcribe_btn"):
                            with st.spinner("üéß Transkrybujƒô nagranie..."):
                                try:
                                    transcribed_text = self.openai_handler.transcribe_audio(audio_bytes)
                                    if transcribed_text:
                                        st.info(f"üìù **Rozpoznany tekst:** {transcribed_text}")
                                        # Aktualizuj session_state i natychmiast poka≈º w text area
                                        st.session_state.translation_input_text = transcribed_text
                                        st.session_state.transcription_count = st.session_state.get('transcription_count', 0) + 1
                                        
                                        # Wyczy≈õƒá plik tymczasowy
                                        try:
                                            if 'temp_translation_audio_file' in st.session_state:
                                                os.unlink(st.session_state.temp_translation_audio_file)
                                                del st.session_state.temp_translation_audio_file
                                        except:
                                            pass
                                        
                                        st.success("‚úÖ **Tekst automatycznie wype≈Çniony w polu t≈Çumaczenia!**")
                                        
                                        # Od≈õwie≈º stronƒô aby zaktualizowaƒá text_area
                                        st.rerun()
                                        
                                    else:
                                        st.error("‚ùå Nie uda≈Ço siƒô przetworzyƒá audio na tekst.")
                                except Exception as e:
                                    st.error(f"‚ùå B≈ÇƒÖd podczas transkrypcji: {str(e)}")
                                    
                                    # Wyczy≈õƒá plik tymczasowy w przypadku b≈Çƒôdu
                                    try:
                                        if 'temp_translation_audio_file' in st.session_state:
                                            os.unlink(st.session_state.temp_translation_audio_file)
                                            del st.session_state.temp_translation_audio_file
                                    except:
                                        pass
                    else:
                        st.warning("‚ö†Ô∏è Brak danych audio do przetworzenia.")
                except ImportError:
                    st.error("‚ùå Brak biblioteki audiorecorder. Zainstaluj: pip install audiorecorder")
                except Exception as e:
                    st.error(f"‚ùå B≈ÇƒÖd podczas nagrywania: {str(e)}")
                
            # Oddzielny kontener dla sekcji t≈Çumacze≈Ñ
            translation_container = st.container()
            
            # Przyciski t≈Çumacze≈Ñ zawsze widoczne
            with translation_container:
                if st.button("Przet≈Çumacz", type="primary", use_container_width=True, key="translate_btn"):
                    # U≈ºyj aktualnej warto≈õci z text_area spiƒôtej z session_state
                    text_to_translate = st.session_state.translation_input_text
                    
                    if not text_to_translate or not text_to_translate.strip():
                        st.warning("Wpisz tekst do przet≈Çumaczenia w pole tekstowe.")
                        return
                    
                    st.session_state.request_count += 1
                    
                    with st.spinner("T≈Çumaczƒô..."):
                        translation_result = self.translation_manager.translate_text(text_to_translate, target_lang, correct_errors, improve_style)
                    
                    if translation_result:
                        st.success("‚úÖ T≈Çumaczenie gotowe!")
                        # Zapisz wynik do session_state i poka≈º poni≈ºej w osobnym polu tylko do odczytu
                        st.session_state.translated_text = translation_result["translation"]
                        # Wy≈õwietl wynik w ≈Çadnej ramce
                        st.markdown(f"""
                        <div class="translation-box">
                            <h4 style="color: #1f77b4; margin-top: 0;">üåç T≈Çumaczenie ({target_lang}):</h4>
                            {translation_result["translation"]}
                        </div>
                        """, unsafe_allow_html=True)
                        

                        
                    else:
                        st.error("‚ùå Nie uda≈Ço siƒô przet≈Çumaczyƒá tekstu.")
                


    def render_explanation_section(self):
        st.header("üìö Wyja≈õnienia s≈Ç√≥w i gramatyki")
        
        # ≈Åadna ramka dla wyja≈õnie≈Ñ
        with st.container():
            st.markdown("""
            <style>
            .explanation-box {
                background-color: #f0f2f6;
                border: 2px solid #1f77b4;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            </style>
            """, unsafe_allow_html=True)
            
            explain_text = st.text_area("Wpisz zdanie lub tekst do wyja≈õnienia:", key="explanation_text", height=100)
            
            if st.button("Wyja≈õnij", key="explain_btn", type="primary"):
                if not explain_text.strip():
                    st.warning("Wpisz tekst do wyja≈õnienia.")
                    return
                
                with st.spinner("Wyja≈õniam..."):
                    prompt = (
                        f"Wyja≈õnij znaczenie i gramatykƒô poni≈ºszego tekstu w prosty spos√≥b, z przyk≈Çadami.\nTekst: {explain_text}"
                    )
                    
                    messages = [
                        {"role": "system", "content": "Jeste≈õ nauczycielem jƒôzyk√≥w. Wyja≈õniaj prosto, z przyk≈Çadami."},
                        {"role": "user", "content": prompt}
                    ]
                    
                    result = self.openai_handler.make_request(messages)
                
                if result:
                    st.success("‚úÖ Wyja≈õnienie gotowe!")
                    # Wy≈õwietl wynik w ≈Çadnej ramce
                    st.markdown(f"""
                    <div class="explanation-box">
                        <h4 style="color: #1f77b4; margin-top: 0;">üìñ Wyja≈õnienie:</h4>
                        {result}
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.error("‚ùå Nie uda≈Ço siƒô wygenerowaƒá wyja≈õnienia.")

    def render_flashcard_section(self):
        st.header("üìñ Fiszki ze s≈Ç√≥wek do nauki")
        
        # ≈Åadna ramka dla fiszek
        with st.container():
            st.markdown("""
            <style>
            .flashcard-box {
                background-color: #f0f2f6;
                border: 2px solid #1f77b4;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            </style>
            """, unsafe_allow_html=True)
            
            st.write("üìù Wpisz tekst, z kt√≥rego chcesz wygenerowaƒá fiszki:")
            
            flashcard_text = st.text_area("Tekst do fiszek", key="flashcard_text_new", height=100)
            st.write("Wybierz jƒôzyk definicji fiszek")
            
            definition_lang = st.selectbox(
                "Jƒôzyk definicji", 
                ["Polish", "English", "German", "French", "Spanish", "Italian", "Arabic", "Chinese", "Japanese"], 
                index=0, 
                key="flashcard_def_lang_new"
            )
        
        if st.button("Wygeneruj fiszki", type="primary", use_container_width=True, key="generate_flashcards_new"):
            if not flashcard_text.strip():
                st.warning("Wpisz tekst do wygenerowania fiszek.")
                return
            
            st.session_state.request_count += 1
            
            with st.spinner("Generujƒô fiszki..."):
                flashcards_data = self.flashcard_manager.generate_flashcards(flashcard_text, definition_lang)
            
            if flashcards_data and "flashcards" in flashcards_data and len(flashcards_data["flashcards"]) > 0:
                st.session_state.flashcards_data = flashcards_data
                st.success("‚úÖ Fiszki zosta≈Çy wygenerowane!")
                
                st.info("üé® Automatycznie generujƒô obraz fiszek...")
                with st.spinner("üé® Generujƒô obraz fiszek..."):
                    image_data = self.flashcard_manager.generate_images(flashcards_data)
                
                if image_data:
                    st.session_state.flashcards_image = image_data
                    st.image(image_data, use_container_width=True)
                    
                    # Dodaj timestamp ≈ºeby obraz by≈Ç zawsze ≈õwie≈ºy
                    import time
                    timestamp = int(time.time())
                    
                    st.download_button(
                        label="üì• Pobierz fiszki jako PNG",
                        data=image_data,
                        file_name=f"flashcards_{timestamp}.png",
                        mime="image/png",
                        use_container_width=True
                    )
                else:
                    st.warning("‚ö†Ô∏è Nie uda≈Ço siƒô wygenerowaƒá obrazu fiszek.")
                
                # Wy≈õwietl fiszki w expanderach
                for i, card in enumerate(st.session_state.flashcards_data["flashcards"], 1):
                    with st.expander(f"üÉè Fiszka {i}: {card.get('word', 'N/A')}"):
                        st.markdown(f"**Definicja:** {card.get('definition', 'N/A')}")
                        st.markdown(f"**Przyk≈Çad:** {card.get('example', 'N/A')}")
            else:
                st.error("‚ùå Nie uda≈Ço siƒô wygenerowaƒá fiszek. Sprawd≈∫ tekst i spr√≥buj ponownie.")

    def render_pronunciation_section(self):
        st.header("üé§ ƒÜwiczenie wymowy")
        st.markdown("---")
        
        # Wyb√≥r jƒôzyka do ƒáwiczenia
        language = st.selectbox(
            "Jƒôzyk do ƒáwiczenia wymowy:",
            ["English", "German", "French", "Spanish", "Italian", "Polish"],
            index=0,
            key="pronunciation_language"
        )
        
        # Generowanie s≈Ç√≥w do ƒáwiczenia
        practice_type = st.selectbox(
            "Typ ƒáwiczenia:",
            ["S≈Çowa podstawowe", "Zwroty codzienne", "Liczby", "Kolory", "Cz≈Çonkowie rodziny"],
            index=0,
            key="practice_type"
        )
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            if st.button("üéØ Generuj s≈Çowa do ƒáwiczenia", type="primary", use_container_width=True):
                self.generate_practice_words(language, practice_type)
            
            # Wy≈õwietl wygenerowane s≈Çowa
            if st.session_state.get('practice_words_result'):
                st.markdown("**üìù S≈Çowa do ƒáwiczenia:**")
                st.write(st.session_state.practice_words_result)
            
            # Wy≈õwietl transkrypcjƒô wymowy
            if st.session_state.get('practice_text'):
                st.markdown("**üé§ Twoja wymowa (transkrypcja):**")
                st.text_area("Transkrypcja wymowy", value=st.session_state.practice_text, height=100, key="pronunciation_text", disabled=True)
        
        with col2:
            # Nagrywanie wymowy
            st.markdown("### üéôÔ∏è Nagrywanie wymowy")
            try:
                from audiorecorder import audiorecorder
                audio_data = audiorecorder(
                    "üî¥ Kliknij aby rozpoczƒÖƒá nagrywanie",
                    "‚èπÔ∏è Kliknij aby zatrzymaƒá",
                    key="pronunciation_voice_recorder"
                )
                

                
                if audio_data is not None and len(audio_data) > 0:
                    # Resetuj stare komunikaty i tekst przy nowym nagrywaniu
                    if 'last_pronunciation_analysis' in st.session_state:
                        del st.session_state.last_pronunciation_analysis
                    
                    st.success("‚úÖ **Nagranie zako≈Ñczone!**")
                    
                    # U≈ºyj bezpo≈õrednio pliku tymczasowego - to ju≈º dzia≈Ça
                    try:
                        import tempfile
                        import os
                        
                        # Utw√≥rz plik tymczasowy
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
                            audio_data.export(temp_file, format="wav")
                            temp_file_path = temp_file.name
                        
                        # Wy≈õwietl audio
                        st.audio(temp_file_path, format="audio/wav")
                        st.success("‚úÖ Audio przygotowane do transkrypcji")
                        
                        # Zapisz ≈õcie≈ºkƒô do pliku tymczasowego w session state
                        st.session_state.temp_audio_file = temp_file_path
                        
                    except Exception as export_error:
                        st.error(f"‚ùå B≈ÇƒÖd przygotowania audio: {str(export_error)}")
                        st.error(f"üîç Typ b≈Çƒôdu: {type(export_error).__name__}")
                        # Nie u≈ºywamy return - pozwalamy kodowi dzia≈Çaƒá dalej
                    
                    # Transkrypcja audio
                    if st.button("üéß Transkrybuj nagranie", key="pronunciation_transcribe", type="primary", use_container_width=True):
                        with st.spinner("üéß Transkrybujƒô nagranie przez OpenAI Whisper..."):
                            try:
                                # U≈ºyj pliku tymczasowego z session state
                                temp_file_path = st.session_state.get('temp_audio_file')
                                if not temp_file_path or not os.path.exists(temp_file_path):
                                    st.error("‚ùå Brak pliku audio do transkrypcji")
                                    return
                                
                                # Transkrypcja audio z pliku tymczasowego
                                with open(temp_file_path, 'rb') as audio_file:
                                    transcribed_text = self.openai_handler.transcribe_audio(audio_file.read())
                                
                                if transcribed_text:

                                    st.success("üéß **Transkrypcja gotowa!**")
                                    st.info(f"üìù **Rozpoznany tekst:** {transcribed_text}")
                                    
                                    # Automatyczna analiza wymowy po nagraniu
                                    analysis_result = self.analyze_pronunciation(language, transcribed_text)
                                    if analysis_result:
                                        st.session_state.last_pronunciation_analysis = analysis_result
                                        st.markdown(f"""
                                        <div style="background-color: #e8f4fd; padding: 20px; border-radius: 10px; border-left: 5px solid #1f77b4; margin: 20px 0;">
                                            <h4 style="margin: 0 0 15px 0; color: #1f77b4;">üé§ Analiza wymowy:</h4>
                                            <div style="font-size: 16px; line-height: 1.6; margin: 0; white-space: pre-line;">{analysis_result}</div>
                                        </div>
                                        """, unsafe_allow_html=True)
                                    else:
                                        st.warning("‚ö†Ô∏è Nie uda≈Ço siƒô przeanalizowaƒá wymowy.")
                                    
                                    # Wyczy≈õƒá plik tymczasowy
                                    try:
                                        if 'temp_audio_file' in st.session_state:
                                            os.unlink(st.session_state.temp_audio_file)
                                            del st.session_state.temp_audio_file
                                    except:
                                        pass
                                    

                                else:
                                    st.error("‚ùå Nie uda≈Ço siƒô przetworzyƒá audio na tekst.")
                                    
                            except Exception as e:
                                st.error(f"‚ùå B≈ÇƒÖd podczas transkrypcji: {str(e)}")
                                
                                # Wyczy≈õƒá plik tymczasowy w przypadku b≈Çƒôdu
                                try:
                                    if 'temp_audio_file' in st.session_state:
                                        os.unlink(st.session_state.temp_audio_file)
                                        del st.session_state.temp_audio_file
                                except:
                                    pass
                
            except ImportError:
                st.error("‚ùå Brak biblioteki audiorecorder. Zainstaluj: pip install audiorecorder")
            except Exception as e:
                st.error(f"‚ùå B≈ÇƒÖd podczas nagrywania: {str(e)}")
                st.error(f"üîç Typ b≈Çƒôdu: {type(e).__name__}")
                st.info("üí° Sprawd≈∫ czy mikrofon jest dostƒôpny i ma uprawnienia")
        




    # --- PIERWSZA PLANSZA - KLUCZ API ---
    def render_setup_screen(self):
        """Pierwsza plansza - wprowadzenie klucza API"""
        st.title("üîë Konfiguracja Language Helper AI")
        st.markdown("---")
        
        st.markdown("""
        <div style="background-color: #f0f2f6; border: 2px solid #1f77b4; border-radius: 10px; padding: 30px; margin: 20px 0; text-align: center;">
            <h2 style="color: #1f77b4; margin-bottom: 20px;">üåç Witaj w Language Helper AI!</h2>
            <p style="font-size: 18px; margin-bottom: 25px;">Aby rozpoczƒÖƒá korzystanie z aplikacji, musisz wprowadziƒá sw√≥j klucz API OpenAI.</p>
            <p style="color: #666; font-size: 16px;">Klucz zaczyna siƒô od 'sk-' i mo≈ºna go uzyskaƒá na stronie <a href='https://platform.openai.com/api-keys' target='_blank'>OpenAI Platform</a></p>
        </div>
        """, unsafe_allow_html=True)
        
        # Pole do wprowadzenia klucza API
        api_key = st.text_input(
            "Wprowad≈∫ sw√≥j klucz API OpenAI:",
            type="password",
            placeholder="sk-...",
            help="Tw√≥j klucz API OpenAI (zaczyna siƒô od 'sk-')",
            key="api_key_input"
        )
        
        if st.button("üöÄ Rozpocznij", type="primary", use_container_width=True):
            if not api_key or not api_key.startswith("sk-"):
                st.error("‚ùå Podaj poprawny klucz API (zaczyna siƒô od 'sk-').")
            else:
                st.session_state.api_key = api_key
                st.success("‚úÖ Klucz API zaakceptowany!")
                st.rerun()
    
    # --- G≈Å√ìWNA APLIKACJA ---
    def render_main_app(self):
        """G≈Ç√≥wna aplikacja z wszystkimi funkcjami"""
        # Renderuj sidebar z opcjami (bez klucza API)
        self.render_main_sidebar()
        
        with st.spinner("üîë Inicjalizujƒô klienta OpenAI..."):
            self.client = get_openai_client(st.session_state.api_key)
        
        if not self.client:
            st.error("‚ùå Nie mo≈ºna zainicjalizowaƒá klienta OpenAI. Sprawd≈∫ klucz API.")
            return
        
        self.openai_handler = OpenAIHandler(self.client)
        self.translation_manager = TranslationManager(self.openai_handler)
        self.flashcard_manager = FlashcardManager(self.openai_handler)

        st.title("üåç Language Helper AI")
        st.markdown("---")
        
        self.render_translation_section()
        st.markdown("---")
        
        self.render_explanation_section()
        st.markdown("---")
        
        self.render_flashcard_section()
        st.markdown("---")
        
        # üé§ ƒÜWICZENIE WYMOWY
        self.render_pronunciation_section()
        
        # Renderuj stopkƒô
        self.render_footer()
    
    def render_main_sidebar(self):
        """Sidebar g≈Ç√≥wnej aplikacji (bez klucza API)"""
        st.sidebar.title("üåç Language Helper AI")
        st.sidebar.markdown("---")
        
        # Motyw
        st.sidebar.markdown("### üé® Motyw")
        theme = st.sidebar.radio("Wybierz motyw", ["Jasny", "Ciemny"], index=0)
        if theme == "Ciemny":
            st.markdown("""
            <style>
            body, .stApp {background-color: #0e1117 !important; color: #fafafa !important;}
            </style>
            """, unsafe_allow_html=True)
        
        # Statystyki
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üìä Statystyki API")
        st.sidebar.metric("Tokeny", f"{st.session_state.total_tokens:,}")
        st.sidebar.metric("Koszt", f"${st.session_state.total_cost:.4f}")
        st.sidebar.markdown("---")
        st.sidebar.markdown("**Aplikacja:**")
        st.sidebar.markdown("üåç t≈Çumaczenia")
        st.sidebar.markdown("üìñ fiszki")
        st.sidebar.markdown("üìö wyja≈õnienia")
        st.sidebar.markdown("üé§ wymowa")
        st.sidebar.markdown("üéôÔ∏è nagrywanie audio")
        
        # Opcja resetowania klucza API
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üîë ZarzƒÖdzanie API")
        if st.sidebar.button("üîÑ Zmie≈Ñ klucz API", type="secondary", use_container_width=True):
            st.session_state.api_key = ""
            st.rerun()
    

    
    def render_footer(self):
        """Stopka aplikacji"""
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; padding: 20px; color: #666;">
            <p>üåç <strong>Language Helper AI</strong> - Tw√≥j inteligentny asystent do nauki jƒôzyk√≥w</p>
            <p>Powered by OpenAI GPT-4 & Whisper</p>
        </div>
        """, unsafe_allow_html=True)
    
    def run(self):
        """G≈Ç√≥wna metoda uruchamiajƒÖca aplikacjƒô"""
        # Sprawd≈∫ czy klucz API jest wprowadzony
        if not st.session_state.api_key or not st.session_state.api_key.startswith("sk-"):
            # PIERWSZA PLANSZA - wprowadzenie klucza API
            self.render_setup_screen()
        else:
            # G≈Å√ìWNA APLIKACJA - renderuj sidebar i wszystkie funkcje
            self.render_main_app()

# --- URUCHOMIENIE ---
if __name__ == "__main__":
    # Inicjalizacja session state
    init_session_state()
    
    # Inicjalizacja aplikacji
    app = MultilingualApp()
    app.run()